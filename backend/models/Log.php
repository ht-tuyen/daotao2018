<?php

namespace backend\models;

use Yii;
use \yii\db\ActiveRecord;
use yii\db\Expression;
use backend\helpers\AcpHelper;
use yii\helpers\ArrayHelper;
/**
 * This is the model class for table "{{%log}}".
 *
 * @property string $log_id
 * @property integer $action_type
 * @property string $action_info
 * @property string $action_controller
 * @property string $action_model
 * @property integer $user_id
 * @property string $remote_addr
 * @property integer $status
 * @property string $edited
 * @property string $create_time
 * @property string $update_time
 */
class Log extends ActiveRecord
{

    const ACTION_TYPE_LOGIN = 1;
    const ACTION_TYPE_CREATE = 2;
    const ACTION_TYPE_UPDATE = 3;
    const ACTION_TYPE_DELETE = 4;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%log}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['action_type', 'action_info'], 'required'],
            [['action_type', 'user_id', 'remote_addr', 'status'], 'integer'],
            [['edited'], 'string'],
            [['create_time', 'update_time'], 'safe'],
            [['action_info'], 'string', 'max' => 255],
            [['action_controller', 'action_model'], 'string', 'max' => 50],
        ];
    }

    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => 'yii\behaviors\TimestampBehavior',
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['create_time'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['update_time'],
                ],
                'value' => new Expression('NOW()'),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'log_id' => 'ID',
            'create_time' => Yii::t('app','Create time'),
            'update_time' => Yii::t('app','Update time'),
            'action_type' => Yii::t('app','Action'),
            'action_info' => Yii::t('app','Information'),
            'action_controller' => Yii::t('app','Controller'),
            'action_model' => Yii::t('app','Model'),
            'user_id' => Yii::t('app','User ID'),
            'remote_addr' => 'IP',
            'status' => Yii::t('app','Status'),
        ];
    }

    public function actionRecord($type = self::ACTION_TYPE_LOGIN, $option = []) {
        $option['action_type'] = $type;
        $option['action_controller'] = Yii::$app->controller->getRoute();
        $option['user_id'] = Yii::$app->user->identity->user_id;
        $option['remote_addr'] = ip2long(Yii::$app->getRequest()->getUserIP());
        $option['status'] = null;
        if(empty($option['action_info'])) $option['action_info'] = '-';
        $this->attributes = $option;
        if(!$this->save()) Yii::error($this->errors);
    }

    public static function getActionOptions() {
        return [
            //self::ACTION_TYPE_LOGIN  => 'Xem',
            self::ACTION_TYPE_CREATE => 'Thêm mới',
            self::ACTION_TYPE_UPDATE => 'Cập nhật',
            self::ACTION_TYPE_DELETE => 'Xóa',
        ];
    }

    public function getAction_() {
        $option = self::getActionOptions();
        return $option[$this->action_type];
    }

    public static function getControllerLabel() {
        return Yii::t('app', 'Log');
    }

    public function beforeSave($insert)
    {
        $days = 3 * 86400;
        Log::deleteAll(['<','create_time',date('Y-m-d H:i:s', time() - $days)]);

        if ($this->isNewRecord) {
            $this->{$this->getTableSchema()->primaryKey[0]} = \backend\helpers\AcpHelper::getDataTableID($this);
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function xulynoidungthaydoi(){
        $model = $this;
        $row_capnhat = '';
        $modelname = "\backend\models\\" . $model->action_model;
        $modelObj = new $modelname();

        $thaydoi = json_decode($model->edited,true);
        $html = '';
        $dem = 0;
        if(is_array($thaydoi)) foreach ($thaydoi as $k => $v) {
            if($k == 0){
                $html = '';                
            }     
            $nd = $modelObj->_change($v, $model->action_info);
            if(!empty($nd)){
                $dem += 1;
                $row_capnhat = $nd['row_capnhat'];
                $html .= '<tr>';
                $html .= '<td>'.$v['label'].'</td>';
                $html .= '<td>'.$nd['html_before'].'</td>';
                $html .= '<td>=></td>';
                $html .= '<td>'.$nd['html_after'].'</td>';
                $html .= '</tr>';    
            }            
        }
        if($dem == 0){            
            $status = 1;
            $html = self::getStatusLabel($status);            
        }else{
            $title = '';
            switch ($model->action_type) {
                case 2:
                    $title .= '<tr class="bg-green">';
                    break;
                case 3:
                    $title .= '<tr class="bg-light-blue">';
                    break;
                case 4:
                    $title .= '<tr class="bg-red-active">';
                    break;
                default:
                    $title .= '<tr>';
                    break;
            }
            

            $title .= '<th>Tên trường</th>';
            $title .= '<th>Dữ liệu cũ</th>';
            $title .= '<th></th>';
            $title .= '<th>Dữ liệu mới</th>';
            $title .= '</tr>';
            $html = $title . $html;
            $status = 2;
        }

        if(empty($model->status)){
            $model->status = $status;
            if(!$model->save()) Yii::errors($model->errors);
        }

        $return = [];
        $return['html'] = $html;
        $return['row_capnhat'] = $row_capnhat;

        return $return;
    }

    public static function getStatusOptions()
    {
        return [            
            1 => 'Không có thay đổi',            
            2 => 'Có thay đổi dữ liệu',
        ];
    }

    public static function getStatusLabel($value = '')
    {
        $array = self::getStatusOptions();
        if ($value === null || !array_key_exists($value, $array))
            return '';
        return $array[$value];
    }


    public static function getControllerOptions()
    {
       $list = Log::find()->select('action_controller')->distinct()
                       ->all();
        if($list){
            return ArrayHelper::map($list ,'action_controller','action_controller');
        }
        return [];
    }

    public static function getModelOptions()
    {
       $list = Log::find()->select('action_model')->distinct()
                       ->all();
        if($list){
            return ArrayHelper::map($list ,'action_model','action_model');
        }
        return [];
    }
    
    public static function getUserOptions()
    {
       $list = Log::find()->select('user_id')->distinct()
                       ->all();
        if($list){
            return ArrayHelper::map($list ,'user_id',function($model){
                return User::getHoten($model->user_id);
            });
        }
        return [];
    }
    
     public static function getIpOptions()
    {
       $list = Log::find()->select('remote_addr')->distinct()
                       ->all();
        if($list){
            return ArrayHelper::map($list ,'remote_addr',function($model){
                return long2ip( $model->remote_addr );
            });
        }
        return [];
    }
    
}
